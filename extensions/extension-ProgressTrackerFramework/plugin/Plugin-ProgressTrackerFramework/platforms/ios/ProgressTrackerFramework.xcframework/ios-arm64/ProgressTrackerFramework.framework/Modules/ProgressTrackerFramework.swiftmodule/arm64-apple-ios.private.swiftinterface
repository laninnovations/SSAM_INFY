// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ProgressTrackerFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import OSLog
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor public class ProgressTrackerBridge : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public func createWithDelegate(_ delegate: any ProgressTrackerFramework.ProgressTrackerDelegate) -> UIKit.UIView?
  @objc @_Concurrency.MainActor public func updateConfig(_ configString: Swift.String)
  @objc @_Concurrency.MainActor public func updateAllSteps(_ stepsInfo: Swift.String)
  @objc @_Concurrency.MainActor public func getAllSteps() -> Swift.String?
  @objc @_Concurrency.MainActor public func dispose()
  @objc @_Concurrency.MainActor public func getStep(_ index: Swift.Int) -> Swift.String
  @objc @_Concurrency.MainActor public func addStep(_ stepInfo: Swift.String)
  @objc @_Concurrency.MainActor public func removeStep(_ index: Swift.Int)
  @objc @_Concurrency.MainActor public func updateStep(_ stepInfo: Swift.String)
  @objc @_Concurrency.MainActor public func setSelection(_ index: Swift.Int) -> Swift.Bool
  @objc @_Concurrency.MainActor public func focusOnStep(_ index: Swift.Int)
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
public struct StepControlConfiguration : Swift.Codable {
  public init(isRightToLeft: Swift.Bool = false, isCompactMode: Swift.Bool = false, isIndexVisible: Swift.Bool = true, isCentered: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct StepsInfo : Swift.Codable {
  public init(currentActiveStepIndex: Swift.Int, steps: [ProgressTrackerFramework.Step])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension UIKit.UIColor {
  public static let tint: UIKit.UIColor
  public static let fillPrimary: UIKit.UIColor
  public static let fillTertiary: UIKit.UIColor
  public static let labelPrimary: UIKit.UIColor
  public static let labelSecondary: UIKit.UIColor
  public static let labelSemanticNegative: UIKit.UIColor
  public static let backgroundSemanticNegative: UIKit.UIColor
  public static let background: UIKit.UIColor
  public static let backgroundDisabled: UIKit.UIColor
  public static let backgroundTertiary: UIKit.UIColor
  public static let fillBackground: UIKit.UIColor
  public static let separator: UIKit.UIColor
  convenience public init(red: Swift.Int, green: Swift.Int, blue: Swift.Int, alpha: Swift.Float = 1.0)
}
public struct Step : Swift.Codable {
  public enum State : Swift.Int, Swift.Codable, Swift.CaseIterable {
    case notVisited, visitedButNotCompleted, completed, error, disabled
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [ProgressTrackerFramework.Step.State]
    public typealias RawValue = Swift.Int
    public static var allCases: [ProgressTrackerFramework.Step.State] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String? = nil, subtitle: Swift.String? = nil, footnote: Swift.String? = nil, iconName: Swift.String? = nil, chapterId: Swift.String? = nil, state: ProgressTrackerFramework.Step.State, isMandatory: Swift.Bool, isVisible: Swift.Bool, isUserInteractionEnabled: Swift.Bool, isSubchapter: Swift.Bool)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol ProgressTrackerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func onCreate()
  @objc optional func onStepSelected(_ selectedStep: Swift.String)
  @objc optional func localizedValue(_ key: Swift.String, params: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class NibDesignable : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension ProgressTrackerFramework.ProgressTrackerBridge : Swift.Sendable {}
extension ProgressTrackerFramework.Step.State : Swift.Equatable {}
extension ProgressTrackerFramework.Step.State : Swift.Hashable {}
extension ProgressTrackerFramework.Step.State : Swift.RawRepresentable {}
