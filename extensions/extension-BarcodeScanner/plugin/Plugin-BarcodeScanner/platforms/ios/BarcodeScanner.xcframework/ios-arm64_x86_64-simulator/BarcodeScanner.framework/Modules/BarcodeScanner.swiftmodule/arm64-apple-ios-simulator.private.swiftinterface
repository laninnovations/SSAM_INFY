// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BarcodeScanner
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import BarcodeScanner
import DeveloperToolsSupport
import Foundation
import SAPFiori
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol ScannerViewDataSource : AnyObject {
  var businessObject: BarcodeScanner.BusinessObject? { get }
  func nextBusinessObject() -> BarcodeScanner.BusinessObject?
}
public struct ScannerViewConfig {
  public var scanTypes: [BarcodeScanner.ScanType]
  public var errorMessage: BarcodeScanner.ErrorMessage
  public init(scanTypes: [BarcodeScanner.ScanType], errorMessage: BarcodeScanner.ErrorMessage)
}
extension BarcodeScanner.ScannerViewConfig : Swift.Equatable {
}
public func == (lhs: BarcodeScanner.ScannerViewConfig, rhs: BarcodeScanner.ScannerViewConfig) -> Swift.Bool
public class BusinessObject {
  public var type: Swift.String
  public var id: Swift.String
  public var detailImage: UIKit.UIImage
  public var subhead: Swift.String
  public var description: Swift.String
  public var substatusText: Swift.String
  public var title: Swift.String
  public var scanProperty: Swift.String
  public var actions: [BarcodeScanner.Action]
  public var filter: Swift.Bool
  public var confirmationText: Swift.String
  public init(type: Swift.String, entitySetName: Swift.String, id: Swift.String, detailImage: UIKit.UIImage, subhead: Swift.String, description: Swift.String, substatusText: Swift.String, title: Swift.String, scanProperty: Swift.String, confirmationText: Swift.String, actions: [BarcodeScanner.Action], filter: Swift.Bool)
  @objc deinit
}
extension BarcodeScanner.BusinessObject : Swift.Equatable {
}
public func == (lhs: BarcodeScanner.BusinessObject, rhs: BarcodeScanner.BusinessObject) -> Swift.Bool
public class Action : Swift.Equatable {
  final public let key: Swift.Int
  final public let type: Swift.String
  final public let title: Swift.String
  public var isHighlighted: Swift.Bool
  public var callbackInfo: [Swift.String : Any]?
  public init(type: Swift.String, title: Swift.String, isHighlighted: Swift.Bool, callbackInfo: [Swift.String : Any]?)
  public func callbackJsonAsString() -> Swift.String?
  public static func == (lhs: BarcodeScanner.Action, rhs: BarcodeScanner.Action) -> Swift.Bool
  @objc deinit
}
public enum FUIBarcodeScanMode {
  case qr
  case ean_upc
  case one_d
  case all
  public var codes: Swift.Set<AVFoundation.AVMetadataObject.ObjectType> {
    get
  }
  public static func == (a: BarcodeScanner.FUIBarcodeScanMode, b: BarcodeScanner.FUIBarcodeScanMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ScannerViewDelegate : AnyObject {
  func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didPerformAction action: BarcodeScanner.Action, businessObject: BarcodeScanner.BusinessObject)
  func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didPerformErrorActionForBusinessObject businessObject: BarcodeScanner.BusinessObject?)
  func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didReceiveScanResults scanResults: [BarcodeScanner.FUIBarcodeScanResult], for businessObject: BarcodeScanner.BusinessObject?)
}
public class ScannerMetadataParser {
  public init(config: [Swift.String : Any])
  public func parseViewConfig() -> BarcodeScanner.ScannerViewConfig?
  public func parseDataConfig() -> BarcodeScanner.BarcodeScannerDataConfig?
  @objc deinit
}
public struct FUIBarcodeScanResult {
  public var stringValue: Swift.String? {
    get
  }
  public var type: Swift.String? {
    get
  }
}
extension BarcodeScanner.FUIBarcodeScanResult : Swift.Equatable {
}
public func == (lhs: BarcodeScanner.FUIBarcodeScanResult, rhs: BarcodeScanner.FUIBarcodeScanResult) -> Swift.Bool
public enum CallBackType : Foundation.NSString {
  case Read
  case Update
  case Create
  case View
  case Config
  public init?(rawValue: Foundation.NSString)
  public typealias RawValue = Foundation.NSString
  public var rawValue: Foundation.NSString {
    get
  }
}
@_hasMissingDesignatedInitializers public class AppModelerDataSource : BarcodeScanner.ScannerDataSource {
  public var businessObjects: [BarcodeScanner.BusinessObject]?
  public var scannerData: [BarcodeScanner.BusinessObject]? {
    get
  }
  public func update(scannerData: [BarcodeScanner.BusinessObject])
  @objc deinit
}
public struct BarcodeScannerDataConfig {
  public var target: BarcodeScanner.DataTarget
}
public struct ErrorMessage {
  public var title: Swift.String
  public var message: Swift.String
  public var actionTitle: Swift.String
}
extension BarcodeScanner.ErrorMessage : Swift.Equatable {
}
public func == (lhs: BarcodeScanner.ErrorMessage, rhs: BarcodeScanner.ErrorMessage) -> Swift.Bool
public enum ScanType {
  case barcode
  case qr
  public static func == (a: BarcodeScanner.ScanType, b: BarcodeScanner.ScanType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DataTarget {
  public var property: Swift.String?
  public var entitySet: Swift.String?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BarcodeScannerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var dataSource: (any BarcodeScanner.ScannerViewDataSource)?
  @_Concurrency.MainActor(unsafe) public var delegate: (any BarcodeScanner.ScannerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var config: BarcodeScanner.ScannerViewConfig?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @_Concurrency.MainActor(unsafe) public func showScanResult()
  @_Concurrency.MainActor(unsafe) public func hideScanResult()
  @_Concurrency.MainActor(unsafe) public func hideNavBar()
  @_Concurrency.MainActor(unsafe) public func dissmissModalView()
  @_Concurrency.MainActor(unsafe) public func showErrorAlert()
  @_Concurrency.MainActor(unsafe) public func showAlert(title: Swift.String, message: Swift.String, actionTitle: Swift.String)
  @_Concurrency.MainActor(unsafe) public func showNextBusinessObject()
  @_Concurrency.MainActor(unsafe) public func setBusinessObject(_ businessObject: BarcodeScanner.BusinessObject?)
  @_Concurrency.MainActor(unsafe) public func updateObjectCell(with businessObject: BarcodeScanner.BusinessObject?)
  @_Concurrency.MainActor(unsafe) public func reloadData()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BarcodeScanner.BarcodeScannerViewController : BarcodeScanner.FUIBarcodeScannerViewDelegate {
  @_Concurrency.MainActor(unsafe) public func didScan(results: [BarcodeScanner.FUIBarcodeScanResult])
}
public class ScannerController : BarcodeScanner.ScannerViewDelegate, BarcodeScanner.ScannerViewDataSource {
  public var delegate: BarcodeScanner.BarcodePluginDelegate!
  public init(businessObjects: [BarcodeScanner.BusinessObject]?)
  public var businessObject: BarcodeScanner.BusinessObject?
  public func nextBusinessObject() -> BarcodeScanner.BusinessObject?
  public func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didReceiveScanResults scanResults: [BarcodeScanner.FUIBarcodeScanResult], for businessObject: BarcodeScanner.BusinessObject?)
  public func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didPerformAction action: BarcodeScanner.Action, businessObject: BarcodeScanner.BusinessObject)
  public func barcodeScanner(_ barcodeScannerViewController: BarcodeScanner.BarcodeScannerViewController, didPerformErrorActionForBusinessObject businessObject: BarcodeScanner.BusinessObject?)
  @objc deinit
}
public class ScannerBusinessObjectsParser {
  public init(objects: [Any])
  public func parseBusinessObjects() -> [BarcodeScanner.BusinessObject]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BarcodeScannerManager) public class BarcodeScannerManager : ObjectiveC.NSObject {
  @objc public func create(params: Foundation.NSDictionary, delegate: BarcodeScanner.BarcodePluginDelegate) -> UIKit.UIViewController?
  @objc public func reload(data: Foundation.NSDictionary)
  @objc public func updateCell()
  @objc public func callbackError()
  @objc override dynamic public init()
  @objc deinit
}
public protocol FUIBarcodeScannerViewDelegate : AnyObject {
  func didScan(results: [BarcodeScanner.FUIBarcodeScanResult])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FUIBarcodeScannerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var delegate: (any BarcodeScanner.FUIBarcodeScannerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var detectedCodeHighlightingViewColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public var detectedCodeHighlightingViewBorderWidth: Swift.Float
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func startScanning(codeFormats: Swift.Set<AVFoundation.AVMetadataObject.ObjectType>) throws
  @_Concurrency.MainActor(unsafe) public func stopScanning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension BarcodeScanner.FUIBarcodeScannerView : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
public protocol ScannerDataSource : AnyObject {
  var businessObjects: [BarcodeScanner.BusinessObject]? { get }
}
extension BarcodeScanner.FUIBarcodeScanMode : Swift.Equatable {}
extension BarcodeScanner.FUIBarcodeScanMode : Swift.Hashable {}
extension BarcodeScanner.CallBackType : Swift.Equatable {}
extension BarcodeScanner.CallBackType : Swift.Hashable {}
extension BarcodeScanner.CallBackType : Swift.RawRepresentable {}
extension BarcodeScanner.ScanType : Swift.Equatable {}
extension BarcodeScanner.ScanType : Swift.Hashable {}
